// devel_au_zgonly_readpulsecal 
// Looks for a pulsecal file in the dataset and behaves accordingly


/************************/
// __          __     _____  _   _ _____ _   _  _____ 
// \ \        / /\   |  __ \| \ | |_   _| \ | |/ ____|
//  \ \  /\  / /  \  | |__) |  \| | | | |  \| | |  __ 
//   \ \/  \/ / /\ \ |  _  /| . ` | | | | . ` | | |_ |
//    \  /\  / ____ \| | \ \| |\  |_| |_| |\  | |__| |
//     \/  \/_/    \_\_|  \_\_| \_|_____|_| \_|\_____|
                                                    
// This AU program calls pulsecal and acts on the results
// Acquiring data without you having the chance to sanity check the 
// results
// You shoudl read the notes carefully before deploying it                                                  
// perticularly with respect to the automatic calculation of the carbon pulse 
  
// Pulsecal file would be generated by e.g au_rga_zg_pulsecaltest
// and looks like:
// <pulsecal p1> <prosol p1>
// lives in the root <NAME> folder
// NB this should really be done when the probe is correctly tuned, so we may need a separate Janus experiment
// to go at the beginning of the composite experiments if we're not going to do ATMA for the standard proton

//This au program checks the pulsecal value against the default value 
// and if the result is within +5% it doesn't do anything (because pulsecal is not super reliable on organic samples)
// if between +5 and +50%, does getprosol with the found proton pulse length
// If >+50%, does getprosol with default value +50% 
// This is for safety: shaped pulses and decoupling get executed at higher power
// and particularly if carbon pulses are recalculated this can be an issue.

// The current values are read from p1/pl1 etc 
// For safety getprosol is called first
// If carbon is set as NUC1 or NUC2 then getprosol will be called with carbon parameters as well
// This is based on a scaling factor for carbon which is defined per instrument.
// For arran and Glenfairn so far it is defined as the square root of the factor found for proton
// For other spectrometers so far no scaling is done - it should definitely be done for Tobermory for example.
// At the used scaling factor and with the limit of 50% increase for proton pulse, 
//the RF power for carbon can increase by at most 50%, which should be safe - the prosol powers  
//for shaped pulses should be checked to ensure that there is no possibility of going past the normal peak power,
// particularly if very short 180 shapes have been set.

char pulsecalfilename[PATH_MAX];
FILE *pulsecalfile = NULL;
char instrum[128], result[255];
sprintf(pulsecalfilename,"%s\\%s\\pulsecal",disk,name);
char nuc1[8], nuc2[8], prosolstring[256];
float carbonpulse;
double carbonfactor;
float p1, statusp1, protonpower, carbonpower;
int test;
GETCURDATA

int dummy=0;  //change to 1 for testing: it will just print the command as a string

// for safety call getprosol so that p1/pl1 etc must be correct
GETPROSOL

// read what nuclei are set so can decide if carbon needs to be considered
// and read instrument name for seting the relative scaling of carbon pulse
FETCHPAR("NUC1", nuc1)
FETCHPAR("NUC2", nuc2)
FETCHPARS("INSTRUM", instrum)


// is a pulsecal file present? If so we open it, otherwise we skip all this 
if ((pulsecalfile=fopen(pulsecalfilename, "r")) != NULL)
{
		// pulsecal file found so read it
		if (fgets(result, 255, pulsecalfile) != NULL)
	{
		// If we read something from the file crack on else abort
		
		sscanf(result,"%f %f", &p1, &statusp1); 
		
		// Sanity check the results
		if( 5.0 < p1 && p1 < 25 && 5.0 < statusp1 && statusp1 < 25)
		{
			// we found integers in a vaguely sensible range, continue
			
		    if(p1>(statusp1*1.05))
	        { 
            //Proc_err(DEF_ERR_OPT, "long pulse");
			// pulse is longer than normal, so check how long
			
			    if(p1>(statusp1*1.5))
			    {
				    //Proc_err(DEF_ERR_OPT, "very long pulse");
				    // pulse too long so pretend it's 1.5x
				    p1=statusp1*1.5;
				}
		        // take appropriate value of proton pulse forwards
			
	  
	              // is this a carbon job?
	             if(strcmp(nuc1,"13C")==0 || strcmp(nuc2,"13C")==0 )
	            {
	  	            // Carbon found, check whether observe or not
	  	            if (strcmp(nuc1,"13C")==0)
	  	            {
                        // NUC1 is carbon so read P1/Pl1 for the carbon pulse and pl2 for proton power
	  		            FETCHPAR("P 1", &carbonpulse);
	  		            FETCHPAR("PLdB 1", &carbonpower);
	  		            FETCHPAR("PLdB 2", &protonpower) 
	  	            } 
    	              else if (strcmp(nuc2,"13C")==0)
	  	            {
                         // NUC2 is carbon so read P3/Pl2 for the carbon pulse and pl1 for proton power
	  		            FETCHPAR("P 3", &carbonpulse); 
                        FETCHPAR("PLdB 2", &carbonpower);
                        FETCHPAR("PLdB 1", &protonpower) 
	  	            }
	  	    
	  	            // define relative factor of carbon pulse increase compared to proton
	  	            // square root is not miles off for arran and glenfairn
	  	            // ignore for all else for now
                    // NB this is currently just set according to INSTRUM, no accounting for different probes!
	  	            if(strcmp(instrum,"arran")==0)
	  	            {
	  		            carbonfactor=sqrt(p1/statusp1);
	  	            }
	  	            else if(strcmp(instrum,"glenfairn")==0)
	  	            {
	  		           carbonfactor=sqrt(p1/statusp1);
	  	            }
	  	            else carbonfactor=1.0;
	                //Calculate reference carbon pulse
	  	            carbonpulse=carbonpulse*carbonfactor;
                    // Build the string for getprosol 
                    sprintf(prosolstring,"sendgui getprosol 1H %f %f 13C %.2lf %.2lf", p1, protonpower, carbonpulse, carbonpower);
                
	            }
	                else
	            {
                    //Apparently not a carbon job so read appropriate proton power
                    if (strcmp(nuc1,"1H")==0)
	  	            {
	  	                FETCHPAR("PLdB 1", &protonpower)
                    }
                    else if (strcmp(nuc2,"1H")==0)
	  	            {
	  	                FETCHPAR("PLdB 2", &protonpower)
                    }
                    else
                    {
                        // we didn't find proton anywhere so abort the getprosol part
                        goto skippulsecal;
                    }
	                sprintf(prosolstring,"sendgui getprosol 1H %f %f", p1, protonpower);
	            }
                // now we can execute getprosol
                if(dummy)
                {
                    Proc_err(DEF_ERR_OPT,"Getprosol string is: %s", prosolstring);
                }
                else
                {
                    XCMD(prosolstring);
                }
	        }// if we're not in here then proton pulse is normal so we're not doing anything
	    }
 	}
}

skippulsecal:

// Now we just do ZG if dummy is not set

if(dummy)
{

}
else
{
    ZG
}

QUIT