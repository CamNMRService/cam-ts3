/*--------------------------------------------------------------*/
/* Title	: Program janus4_sx				*/
/* WORK IN PROGRESS TO UPDATE TO TOPSPIN 3			*/
/* Topspin 3 update done by djh in cambridge*/
/*major source deviations; no longer part of janus gsk development*/
/* Date		: 02-Aug-2001					*/
/* Version	: 1.0 - Version for Janus4 front-end		*/
/* Author	: John Hollerton				*/
/* Contents	: Main program					*/
/*--------------------------------------------------------------*/
/* Description	:						*/
/*		  Controls Bruker sample changer for XWin-NMR 	*/
/*		  with JCH PC control program.			*/
/*								*/
/* External module : None.					*/
/* Internal module : None.					*/
/*								*/
/* This revision reads the defaults from a file...		*/
/* This version works on IRIX6.5 or later only!!!!		*/
/* ...it also works in XWinNMR 2.5 or later only!!!!		*/
/*--------------------------------------------------------------*/

/*re-write by djh35 to creat ICONNMR EXTSET Files*/
/*0th job - remove unwanted cruft*/
/*1st job understand how to parse multiple experiment into one extset entry*/
/*21-10-15*/


/****************************************/
/*!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!*/ 
/**!!!!!!!!Change to test on djh mac!!!!!!!!!*/

//char def_file[255]="e:/chemist/defaults-csv.txt"; //janus software defaults
char def_file[255]="/Users/duncanhowe/janus-test/defaults-csv.txt"; //janus software defaults
/**!!!!!!!!Change to test on djh mac!!!!!!!!!*/ 

float   delaytime=10.0;
int     expt=1, curloop=1, cpos, specno, jexpt, jsolv,i=1, finish=0;
int     LastSample,  nexpt, parmo, proderrcount, sthou;
int     skipsample, pid, x, proc_or_not=0;
int     prod_access=0; //0 if we can't access the prod file

char    oi[20], juser[50], suser[40], in_data[1024], tmp_fname[1024];
char    shimfile[80], acqufile[80];
char    experiment[155], solvent[40], tunefile[40], sxfile[80];
char    tmp_str[1024], titlefile[80], titletext[80];
char    exptfile[80], diskunit[40];
char    prefix[40], shimset[40], defaultsfile[80], hdwerr[80];
char    archpath[80], archive[20], jcmd_str[1024], outpath[1024];
char    janusup[80], expttime[40], exptsfile[80], protocol[80];
char    sxcmd[80], gradshim[20], comments[1024], command[1024], snostr[1024], tmpcmd[256];
char    statusstr[1024], awmfile[80],tmparchpath[1024],fidpath[1024],procau[1024];
char    exset_filename[PATH_MAX];
char	proclist[1024],procinstruct[1024];

char   *env_name, *file_data, *field, *ed;
FILE   *fprod = NULL, *facqu = NULL, *ferror = NULL, *fwarn = NULL;
FILE   *fshim = NULL, *fwait = NULL, *ftitle = NULL, *fsx = NULL;
FILE   *fexpt = NULL, *fprot = NULL, *flog = NULL, *fdef = NULL;
FILE   *fjup = NULL, *fexpts = NULL, *pidfile = NULL, *fawm = NULL;
FILE  *sname = NULL;
FILE 	*fbat=NULL;
FILE  *f_extset=NULL;

char  samplename[80], snamefile[255];


/*--- Assign filenames for signalling etc.----------------------*/

char batfile[127],batcmd[127];
char prodfile[255];
char prodfiletxt[255];
char errorfile[255];
char warnfile[255];
char waitfile[255];
char protfile[255];
char logfile[255];
char extset_filename[PATH_MAX];

char email[80]="camnmrservice@gmail.com";


time_t lt;


Proc_err ( INFO_OPT, "Starting program");
sleep(delaytime);
//XCMD("setdef ackn no");
//XCMD("setdef stdout no");
//XCMD("setdef stderr no");

/*--------------------------------------------------------------*/
/*--- Get defaults from the defaults file ----------------------*/
strcpy( defaultsfile, def_file );
fdef = fopen( defaultsfile, "r" );
Proc_err ( INFO_OPT, "reading defaultsfile %s",defaultsfile);
strcpy( defaultsfile, def_file );
fdef = fopen( defaultsfile, "r" );
Proc_err( INFO_OPT, "reading defaults");
Proc_err(INFO_OPT,"file is not empty, so do something");
rewind(fdef); //go to begining of file
file_data = fgets(in_data, 1024, fdef); //read in file as a continuous string
fclose(fdef); //close the file
Proc_err(INFO_OPT,"parsing %s file",defaultsfile);
//file is open, read data
field = strtok(in_data, ",");
strcpy( prefix,field);
Proc_err(INFO_OPT,"prefix is %s",prefix);
field = strtok(NULL, ",");
sscanf(field, "%s", &diskunit);
	Proc_err(INFO_OPT,"diskunit is %s",diskunit);
field = strtok(NULL, ",");
sscanf(field,"%s", &suser);
	Proc_err(INFO_OPT,"suser is %s",suser);
field = strtok(NULL,",");
sscanf(field,"%s",&tunefile);
	Proc_err(INFO_OPT,"tunefile is %s", tunefile);
field = strtok(NULL,",");
sscanf(field,"%s",&shimset);
	Proc_err(INFO_OPT,"shimset is %s", shimset);
field = strtok(NULL,",");
sscanf(field,"%s",&archpath);
	Proc_err(INFO_OPT,"archpath is %s", archpath);
field = strtok(NULL,",");
sscanf(field,"%s",&archive);
	Proc_err(INFO_OPT,"archive is %s", archive);
field = strtok(NULL,",");
sscanf(field,"%s",&gradshim);
	Proc_err(INFO_OPT,"gradshim is %s", gradshim);
Proc_err(INFO_OPT,"parsed file");
/*file should contain something like but separated with commas instead of newline:-
Z		-prefix
f:\	-diskunit
chemist		-user for data
qnpshim		-autotune algorithm
QNP.work	-shimfile to load
f:\zips		-archive path
false		-wether to archive or not
true		-wheter to gradshim/topshim or not
*/

Proc_err ( INFO_OPT, "finished reading defaults");

/*--- Assign filenames for signalling etc.----------------------*/
/*set to be the diskunit, then a folder in that called the user usually chemist*/
/*sprintf(batfile, "%s%s\\janus-bat.bat", diskunit,suser);
sprintf(batcmd, "%s%s\\janus-bat.bat", diskunit,suser);
sprintf(prodfile, "%s%s\\prod.txt",diskunit,suser);
sprintf(prodfiletxt, "%s%s\\prod.txt",diskunit,suser);	
sprintf(errorfile, "%s%s\\error.txt",diskunit,suser);
sprintf(warnfile, "%s%s\\warn.txt",diskunit,suser);
sprintf(waitfile, "%s%s\\wait.txt",diskunit,suser);
sprintf(protfile, "%s%s\\prot.txt",diskunit,suser);
sprintf(logfile, "%s%s\\jchlog.txt",diskunit,suser);
*/
// for windows above

sprintf(batfile, "%s%s/janus-bat.bat", diskunit,suser);
sprintf(batcmd, "%s%s/janus-bat.bat", diskunit,suser);
sprintf(prodfile, "%s%s/prod.txt",diskunit,suser);
sprintf(prodfiletxt, "%s%s/prod.txt",diskunit,suser);	
sprintf(errorfile, "%s%s/error.txt",diskunit,suser);
sprintf(warnfile, "%s%s/warn.txt",diskunit,suser);
sprintf(waitfile, "%s%s/wait.txt",diskunit,suser);
sprintf(protfile, "%s%s/prot.txt",diskunit,suser);
sprintf(logfile, "%s%s/jchlog.txt",diskunit,suser);

Proc_err ( INFO_OPT,"%s",batfile);
Proc_err ( INFO_OPT,"%s",batcmd);
Proc_err ( INFO_OPT,"%s",prodfile);
Proc_err ( INFO_OPT,"%s",prodfiletxt);
Proc_err ( INFO_OPT,"%s",warnfile);
Proc_err ( INFO_OPT,"%s",waitfile);
Proc_err ( INFO_OPT,"%s",protfile);
Proc_err ( INFO_OPT,"last status print %s",logfile);




/*the below becomes the place the data is stored. Done in the old skool path format for compatibility*/
// the first line is for windows, second line for testing on my mac.
//sprintf(diskunit,"%sdata\\%s\\nmr\\",diskunit,suser);
//sprintf(diskunit,"%sdata/%s/nmr/",diskunit,suser);


/*--------------------------------------------------------------*/

Proc_err ( INFO_OPT, "At end of default file parsing");
finish = 0;
proderrcount=0;

while ( finish != 1 ) //THE MAIN LOOP
{ 
	//now check if prod file is actually there
	while (prod_access !=1)
	{/*--- Let everyone know that the loop is running -*/
      	if(access(prodfile, F_OK)!=0) 
				{
            Proc_err ( INFO_OPT, "In loop waiting for prod file. Waiting %f secs before trying to read %s again ",delaytime, prodfile); 
	          sleep(delaytime);
				} else
				{ prod_access=1;
				}
	} 
	/*------------------------------------------------*/

	skipsample=0;
	/*------------------------------------------------*/

	/*---Get the sample data from the prod file-------*/
	Proc_err( INFO_OPT, "About to read data from prod file - %s", prodfile);
	fprod=fopen(prodfile,"r");
	file_data = fgets(in_data, 1024, fprod);
	Proc_err ( INFO_OPT, "prod file %s  contains :- %s",prodfile,in_data);
	/*------------------------------------------------*/

	/*------------------------------------------------*/

	/*---Now extract the data from the line-----------*/
	if ( file_data == NULL ) //what to do if no data from prod file, or maybe also parse line and count the commas - get around people putting commas in their sample names
	{
		fclose( fprod );
		proderrcount++;
		if (proderrcount>2)
		{
			sprintf( tmp_str, "del %s", prodfiletxt );
			fbat = fopen(batcmd, "w");
			fputs( tmp_str,fbat);
			fclose(fbat);
			system(batcmd);
        		//system ( tmp_str );
        		//sprintf( tmp_str, "rm %s", prodfile );  
			proderrcount=0;
		}
		Proc_err ( INFO_OPT, "***ERROR - No data on line***" );
		sleep( delaytime );
		ferror = fopen(errorfile,"w");
		fputs( "Prod file format error", ferror);
		fclose( ferror );
		flog = fopen(logfile,"a+");
		fputs( "PROD FILE ERROR\n", flog);
		fclose( flog );
		exit(1);
	}
	proderrcount=0;
/*Now parse the prod file into the various variables*/

	field = strtok( in_data, "," );
	sscanf( field, "%d", &cpos );
	
	field = strtok(NULL, "," );
	strcpy( tmp_fname, field );	

	field = strtok(NULL, "," );
	strcpy( oi, field );	

	field = strtok( NULL, "," );
	strcpy( juser, field );

	field = strtok( NULL, "," );
	strcpy( solvent, field );

	field = strtok( NULL, "," );
	strcpy( protocol, field );

	field = strtok( NULL, ",");
	strcpy( comments, field);
	flog = fopen(logfile,"a+");
	lt=time(NULL);
	sprintf(expttime, ctime(&lt));
	fputs( expttime, flog);
	sprintf( tmp_str, " Specno: %s,Sample: %s, User: %s, Sol= %s, Expt= %s, Cpos= %d\n", tmp_fname, oi, juser, solvent, protocol, cpos); 
	fputs( tmp_str, flog);
	fclose( flog );
	


/*Now a mod by DJH to make a filename containing the sample name, without any 'rogue' characters', and poke that into USERP2. Set USERP1 to be the comments, if an email*/

			sprintf( samplename, "%s", oi );
			for( i = 0; i < strlen(samplename); i++ )
   			 {
    				if( samplename[i] == '\\' || samplename[i] == '/' || samplename[i] == ':' || samplename[i] == '*' ||
          				samplename[i] == '?' || samplename[i] == '\"' || samplename[i] == '<' || samplename[i] == '>' ||
           				samplename[i]== '#' || samplename[i]=='$' || samplename[i]=='%' || samplename[i]=='^' || samplename[i]=='&' ||
				samplename[i]=='=' || samplename[i]=='+' || samplename[i]==' ' ||
          				samplename[i]=='(' || samplename[i]==')' || samplename[i]=='{' || samplename[i]=='}' || samplename[i]=='[' ||
          				samplename[i]==']' || samplename[i]==';' || samplename[i]=='@' || samplename[i]=='~' || samplename[i]=='!' || samplename[i]=='`')
     		 			{
        					samplename[i] = '_';
     		 			}
   			 }


	if (skipsample==0)
	{

		
// get the experiment from the prod file

		while ((fgets( experiment, 155, fprod)!=NULL)&&(strlen(experiment)>2)) //this is slightly magic to me, 
		//but reads prod into experiment - protocol is the experiments separated by spaces?
		{
			experiment[strlen(experiment)-1]=NULL;
			/*--Get that data acquiring!----------------------*/
			sprintf(statusstr,"Sample: %s, Expt: %s, solvent: %s",oi,experiment,solvent);
			Show_status(statusstr );
	/*need to remove trailing character from comments*/
    	Proc_err(INFO_OPT,"comments from prod is :- %s",comments);
    	comments[strlen(comments)-1]=NULL;
      fclose (fprod); //close the prod file.
 
/***ADD HOLDER NO ETC TO EXTSET*****/
      sprintf(extset_filename,"%s/tmp/janus-extset-%s-%s",PathXWinNMRProg(),tmp_fname,samplename);
     
      f_extset = fopen(extset_filename,"a+");
      Proc_err(INFO_OPT, "extset_filename is - %s", extset_filename);
      if( (f_extset != NULL) )
      {
      	  sprintf(tmp_str,"USER %s\n",juser);
      	  fputs(tmp_str,f_extset);
      	  sprintf(tmp_str,"HOLDER %i\nDELETE\n",cpos);
      	  fputs(tmp_str,f_extset);
      	  sprintf(tmp_str,"HOLDER %i\n",cpos);
      	  fputs(tmp_str,f_extset);
      	  //change to usual here - now filename is autogenerated code plus their (sanitised) samplename
      	  sprintf(tmp_str,"NAME %s-%s\n",tmp_fname,samplename);
      	  fputs(tmp_str,f_extset);
      	  sprintf(tmp_str,"EXPERIMENT %s\n", experiment);
      	  fputs(tmp_str,f_extset);
      	  sprintf(tmp_str,"SOLVENT %s\n", solvent);
      	  fputs(tmp_str,f_extset);
      	  sprintf(tmp_str, "PARAMETERS USERP1,%s\nEND\n", comments);
      	  fputs(tmp_str,f_extset);
      	  
      
/*
Example of what we want to do :-
      fputs
HOLDER cpos
DELETE
#
USER juser
HOLDER cposs
NAME specno-samplename
EXPERIMENT experiment
#composite experiment
PARAMETERS USERP1,comments
END

*/
         fclose(f_extset);
     }
      prod_access = 1;
//Spin the wheels, checking if prod file is still here, if it is, loop. If its not, go on as iconnmr has removed it. 

      while (prod_access != 0)
      {
          if(access(prodfile, F_OK)==0)
          //  if( (fprod = fopen(prodfile,"r")) != NULL)
            { 
                prod_access=1;	
               // sprintf(statusstr,"Waiting for IconNMR to delete prod.txt - Sleeping for %f seconds",delaytime);
               Proc_err(INFO_OPT, "Waiitng for iconnmr to delete %s - Sleeping %f seconds",prodfile, delaytime );
                sleep(delaytime);
		            //Show_status(statusstr );
             }else 
             {
              prod_access=0;
              Proc_err( INFO_OPT, "Don't appear to be able to open prod file - %s, iconnmr must have deleted it, going on...",prodfile);
             }
       }


		//	CPR_exec("ro off",WAIT_TERM);			sprintf(expttime, ctime(&lt));
			expttime[strlen(expttime)-1]=NULL;
//removed stuff about logging to archive dir.
			//sprintf(janusup, "c:/chemist/jup.txt");
			//for windows
			//sprintf(janusup, "%s%s\\jup.txt",diskunit,suser); 
      sprintf(janusup, "%s%s/jup.txt",diskunit,suser);
			Show_status( "opening local janusup to append");
			sleep(delaytime);
			fjup = fopen(janusup, "a+");
			sprintf( tmp_str, "%s,%d,%s,%s,%s,%s,%d,%s,%s\n", tmp_fname, nexpt, oi, juser, solvent, experiment, cpos, expttime, protocol); 
			fputs( tmp_str, fjup);
			fclose( fjup );
			/*CHECK*/
   	 /*CHECK*/
   			sprintf(snamefile,PROCPATH("samplename"));
   	 		sname=fopen(snamefile,"w");
			fprintf(sname, "%s", samplename);
			fclose(sname);
		
			nexpt++;
		}
	
/*ok, now at end of this samples experiments; remove prod fie and tidy up*/

		fclose(fprod);
	
//CPR_exec("janus-email",WAIT_TERM);


	

		flog = fopen(logfile,"a+");
		fputs( "Sample completed...\n", flog);
		fclose( flog );
	}
	

	Proc_err ( INFO_OPT, "At the end.");
}/*End while*/
Show_status( "Program aborted!" );
QUIT


