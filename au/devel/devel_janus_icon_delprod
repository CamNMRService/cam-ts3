/*--------------------------------------------------------------*/
/*Designed to delete the prod file  Janus uses                  */

/****************************************/
/*!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!*/ 
/**!!!!!!!!Change to test on djh mac!!!!!!!!!*/

//This compiles at least - working on parsing prod.txt file to check it matches curdata - done 
//Nest write to log file

//char def_file[255]="e:/chemist/defaults-csv.txt"; //janus software defaults
//char def_file[255]="/Users/duncanhowe/janus-test/defaults-csv.txt"; //janus software defaults
/* This has a bug/feature it all craps out if there's a space in the paths created. Ensure IconNMR doesn't creat spaces in the path*/
/*work around - make IconNMR ignore "data", "nmr" and "user" in global options, dataset management*/
/*then define exact path in  usermanager data directories*/

char def_file[255]="D:/chemist/defaults-csv.txt";
/**!!!!!!!!Change to test on djh mac!!!!!!!!!*/ 

float   delaytime=10.0;
int     error=0; //if not 0 an error has occured.
int     curloop=1, cpos, specno, jexpt, jsolv,i=1, finish=0;

int     prod_access=0; //0 if we can't access the prod file
int     lock_access=0;
char    oi[20], juser[50], suser[40], in_data[1024], tmp_fname[1024];
char    shimfile[80], acqufile[80];
char     tunefile[40];
char    cmd_str[1024];
char    expt_time[PATH_MAX];
char    exptfile[80], diskunit[40], archive[40], gradshim[40], solvent[40], protocol[40];
char    comments[PATH_MAX],filename[PATH_MAX], archpath[PATH_MAX],prefix[40], shimset[40], defaultsfile[PATH_MAX]; 
char 		error_msg[1024];

char  *file_data, *field;
FILE   *fprod = NULL;
FILE   *fdef = NULL;
FILE	 *flog = NULL;
FILE    *f_lock = NULL;


char  samplename[80], snamefile[255];


/*--- Assign filenames for signalling etc.----------------------*/

char batfile[127],batcmd[127];
char prodfile[PATH_MAX];
char lockfile[PATH_MAX];
char prodfiletxt[255];
char errorfile[255];
char warnfile[255];
char waitfile[255];
char protfile[255];
char logfile[255];
char extset_filename[PATH_MAX];

char email[80]="camnmrservice@gmail.com";



Proc_err ( INFO_OPT, "Starting program");
//sleep(delaytime);
//XCMD("setdef ackn no");
//XCMD("setdef stdout no");
//XCMD("setdef stderr no");
//This is designed to be run from the current dataset running under iconNMR
GETCURDATA
VIEWDATA_SAMEWIN
/*--------------------------------------------------------------*/
/*--- Get defaults from the defaults file ----------------------*/
strcpy( defaultsfile, def_file );
fdef = fopen( defaultsfile, "r" );
Proc_err ( INFO_OPT, "reading defaultsfile %s",defaultsfile);
strcpy( defaultsfile, def_file );
fdef = fopen( defaultsfile, "r" );
Proc_err( INFO_OPT, "reading defaults");
Proc_err(INFO_OPT,"file is not empty, so do something");
rewind(fdef); //go to begining of file
file_data = fgets(in_data, 1024, fdef); //read in file as a continuous string
fclose(fdef); //close the file
Proc_err(INFO_OPT,"parsing %s file",defaultsfile);
//file is open, read data
field = strtok(in_data, ",");
strcpy( prefix,field);
Proc_err(INFO_OPT,"prefix is %s",prefix);
field = strtok(NULL, ",");
sscanf(field, "%s", &diskunit);
	Proc_err(INFO_OPT,"diskunit is %s",diskunit);
field = strtok(NULL, ",");
sscanf(field,"%s", &suser);
	Proc_err(INFO_OPT,"suser is %s",suser);
field = strtok(NULL,",");
sscanf(field,"%s",&tunefile);
	Proc_err(INFO_OPT,"tunefile is %s", tunefile);
field = strtok(NULL,",");
sscanf(field,"%s",&shimset);
	Proc_err(INFO_OPT,"shimset is %s", shimset);
field = strtok(NULL,",");
sscanf(field,"%s",&archpath);
	Proc_err(INFO_OPT,"archpath is %s", archpath);
field = strtok(NULL,",");
sscanf(field,"%s",&archive);
	Proc_err(INFO_OPT,"archive is %s", archive);
field = strtok(NULL,",");
sscanf(field,"%s",&gradshim);
	Proc_err(INFO_OPT,"gradshim is %s", gradshim);
Proc_err(INFO_OPT,"parsed file");


Proc_err ( INFO_OPT, "finished reading defaults");

/*--- Assign filenames for signalling etc.----------------------*/
/*set to be the diskunit, then a folder in that called the user usually chemist*/
sprintf(batfile, "%s%s\\janus-bat.bat", diskunit,suser);
sprintf(batcmd, "%s%s\\janus-bat.bat", diskunit,suser);
sprintf(prodfile, "%s%s\\prod.txt",diskunit,suser);
sprintf(lockfile, "%s%s\\janus_lock.txt",diskunit,suser);
sprintf(prodfiletxt, "%s%s\\prod.txt",diskunit,suser);	
sprintf(errorfile, "%s%s\\error.txt",diskunit,suser);
sprintf(warnfile, "%s%s\\warn.txt",diskunit,suser);
sprintf(waitfile, "%s%s\\wait.txt",diskunit,suser);
sprintf(protfile, "%s%s\\prot.txt",diskunit,suser);
sprintf(logfile, "%s%s\\jchlog.txt",diskunit,suser);

// for windows above

//sprintf(batfile, "%s%s/janus-bat.bat", diskunit,suser);
//sprintf(batcmd, "%s%s/janus-bat.bat", diskunit,suser);
//sprintf(prodfile, "%s%s/prod.txt",diskunit,suser);
//sprintf(prodfiletxt, "%s%s/prod.txt",diskunit,suser);	
//sprintf(errorfile, "%s%s/error.txt",diskunit,suser);
//sprintf(warnfile, "%s%s/warn.txt",diskunit,suser);
//sprintf(waitfile, "%s%s/wait.txt",diskunit,suser);
//sprintf(protfile, "%s%s/prot.txt",diskunit,suser);
//sprintf(logfile, "%s%s/jchlog.txt",diskunit,suser);

Proc_err ( INFO_OPT,"%s",batfile);
Proc_err ( INFO_OPT,"%s",batcmd);
Proc_err ( INFO_OPT,"%s",prodfile);
Proc_err ( INFO_OPT,"%s",lockfile);
Proc_err ( INFO_OPT,"%s",prodfiletxt);

Proc_err ( INFO_OPT, "At end of default file parsing");

#ifdef HAS_WINDOWS_FEATURES
   sprintf(cmd_str,"del %s %s",prodfile, lockfile);
#else
 		sprintf(cmd_str, "rm %s %s",prodfile, lockfile);
#endif

//get the time
time_t lt;
lt=time(NULL);
sprintf(expt_time, ctime(&lt));
expt_time[strlen(expt_time)-1]=NULL; //strip training newline from time

if( (access( prodfile, F_OK ) == 0) &&  (access( lockfile, F_OK ) == 0) ) {

    // lockfile exists
    Proc_err ( INFO_OPT, "cmd_str is - %s", cmd_str);
    Proc_err( INFO_OPT, "About to read data from prod file - %s", prodfile);
	  fprod=fopen(prodfile,"r");
	  file_data = fgets(in_data, 1024, fprod);
	  Proc_err ( INFO_OPT, "prod file %s  contains :- %s",prodfile,in_data);
	  field = strtok( in_data, "," );
	  sscanf( field, "%d", &cpos );
	
	  field = strtok(NULL, "," );
	  strcpy( tmp_fname, field );	

	  field = strtok(NULL, "," );
	  strcpy( oi, field );	

	  field = strtok( NULL, "," );
	  strcpy( juser, field );

	  field = strtok( NULL, "," );
	  strcpy( solvent, field );

	  field = strtok( NULL, "," );
	  strcpy( protocol, field );

	  field = strtok( NULL, ",");
	  strcpy( comments, field);
	  
	  
/*Now a mod by DJH to make a filename containing the sample name, without any 'rogue' characters', and poke that into USERP2. Set USERP1 to be the comments, if an email*/

		sprintf( samplename, "%s", oi );
		fclose(fprod);
		for( i = 0; i < strlen(samplename); i++ )
   	{
    				if( samplename[i] == '\\' || samplename[i] == '/' || samplename[i] == ':' || samplename[i] == '*' ||
          				samplename[i] == '?' || samplename[i] == '\"' || samplename[i] == '<' || samplename[i] == '>' ||
           				samplename[i]== '#' || samplename[i]=='$' || samplename[i]=='%' || samplename[i]=='^' || samplename[i]=='&' ||
				samplename[i]=='=' || samplename[i]=='+' || samplename[i]==' ' ||
          				samplename[i]=='(' || samplename[i]==')' || samplename[i]=='{' || samplename[i]=='}' || samplename[i]=='[' ||
          				samplename[i]==']' || samplename[i]==';' || samplename[i]=='@' || samplename[i]=='~' || samplename[i]=='!' || samplename[i]=='`')
     		 			{
        					samplename[i] = '_';
     		 			}
   	}
	  
	 sprintf( filename, "%s-%s", tmp_fname,samplename);
	 
	 if (strcmp(filename, name) !=0 )
	 {
	 	   sprintf( error_msg, "%s PROD HAS DIFFERENT SAMPLE NAME TO CURRENT DATASET! WHOOP! WHOOP! Filename from prod is %s Current dataset name is  %s\n", expt_time,filename, name);
	     STOREPAR("TI", error_msg)
	     XAU("devel-janus-icon-whoopwhoop",cmd);
	     Proc_err (INFO_OPT, "%s", error_msg);
	 } else
	   {
	   	//sprintf( error_msg, "Deleting prod %s", expt_time, cmd_str);
	   	sprintf( error_msg, "Deleting prod and lockfile %s", cmd_str);
	   	Proc_err (INFO_OPT, "%s", error_msg);
	    STOREPAR("TI", error_msg)
	    // XAU("devel-janus-icon-whoopwhoop",cmd);
	   	/********************This is where the the magic happens**************************/
	    system(cmd_str);
	    
	 
/* remove check for deletion of prod file as this could end up deleting the new prod file 	    	
	    	   	   if( access( prodfile, F_OK ) == 0 ) {
    // prodfile exists
         Proc_err (INFO_OPT, "%s appears to have failed, prod file still exists, trying again");
         fprod=fopen(prodfile,"r");
         fclose(fprod);
         sleep(2);
         system(cmd_str);
	    }
 */        
	    XAU("service-email","");
	   }
//write error to lofgile    
    flog = fopen(logfile,"a+");
	  fputs( error_msg, flog);
	  fclose( flog );
	/*------------------------------------------------*/
} else {
    // fprodfile doesn't exist
    sprintf( error_msg, "%s - Couldn't find/access prodfile. %s\n", expt_time,prodfile);
    Proc_err ( INFO_OPT, "%s", error_msg);
//write error to logfile
    flog = fopen(logfile,"a+");
	  fputs( error_msg, flog);
	  fclose( flog );

    
}







/*the below becomes the place the data is stored. Done in the old skool path format for compatibility*/
// the first line is for windows, second line for testing on my mac.
//sprintf(diskunit,"%sdata\\%s\\nmr\\",diskunit,suser);
//sprintf(diskunit,"%sdata/%s/nmr/",diskunit,suser);


/*--------------------------------------------------------------*/



QUIT


