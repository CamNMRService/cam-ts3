/* This Au program is designed to perform a 360 1H length calibration using the "poise" method */
/* It will read in a defaults file to define the parameters used for the poise optimisation */
/*It will define the poise method, run it and check the result isn't too far from the prosol value*/
/*It will write the output to a logfile*/
/*djh35@cam.ac.uk October 2021 */
//devel_poise_1h_p1
#include <stdio.h>
#include <time.h>

//Set some variables for below
char defaults_file_name[PATH_MAX];
int ts_major = GetTsVersionMajor();
Proc_err(INFO_OPT,"ts_major is %i",ts_major);

/*!!!!VARIABLES THAT NEED TO BE SET!!!!*/
/********************************/

char method_name[40]="poise_auto_p1_1h"; //poise method name to create for calibration. Also used for results filename.
char default_au[40]="service_zg_efp"; //au program to aquire and process results. Set to default for default method within poise.
//This acts as an overide for poise, for it to use default method, default need to be saved in the service_poise_19f_p1_defaults.txt AND in this variable
char param_set_name[40]="PROTON";
char param[40] = "p1";
char p_program[40] = "zg";

#ifdef HAS_WINDOWS_FEATURES
   sprintf(defaults_file_name,"C:\\Bruker\\cam-ts%i\\poise\\service_poise_1h_p1_defaults.txt",ts_major);
#else
 		sprintf(defaults_file_name,"/opt/cam-ts%i/poise/service_poise_1h_p1_defaults.txt",ts_major);
#endif
float max_deviation = 10.0;

//Handlly print out what its doing as it goes along. Can change to output diff levels of verbosity.
//verbose == 0 is no output
int verbose = 1;
//set aqtest = 0 to issue aquisition commands to the spectrometer
int aqtest = 0; // !=0 == test mode ==0 for aquire mode
/********************************/


// Also need a place for the results to go. I'm thinking same place as the helium log will suit us. Maybe duplicate to where the probe files are. Would be nice
//if nmr_save backed it up too.
// The method name is fixed and nor read from the defaults as don't want too much cluttering up the place.

//Get topspin major version for defaults file location - set for us to be part of the git version control. Changes to method easily pushed to all spects.
/*Local lab defaults*/


int i; //loop counter
FILE *results_file = NULL;
FILE *defaults_file = NULL;
FILE *title_file = NULL;

char results_file_name[PATH_MAX];

char title_path_name[PATH_MAX];

char defaults_content[1024]="";
char title_text[1024]="";
char results_content[1024]="";
char instrum_name[40]="";
char probe_name[PATH_MAX];
char probe_name_trunc[PATH_MAX];





/*End of Local lab defaults*/

//Now more variable definitions

char *field;
char *defaults_content_ptr;
char *end_ptr;




char sw[40];
char o1p[40];
char f1p[40];
char f2p[40];
char rg[40];
char d1s[40];
char pc_lb[40];
char pc_hb[40];
char tol[40];
char cost_function[40];
char poise_cmd[PATH_MAX];
char poise_au[PATH_MAX];
char poise_status[40];


double sw_double;
double o1_ppm_double;
double o1_hz_double;
double sfo1;
double f1p_double;
double f2p_double;
double deviation;

float rg_float=1.1;
float d1_float;
float tol_float;
float p1_init;
float p1_min;
float p1_max;
float p1_opt;
int pc_lb_int;
int pc_hb_int;



//Get the defaults content
defaults_file = fopen (defaults_file_name,"r");
if (defaults_file == NULL)
{
	Proc_err(DEF_ERR_OPT,"can't open file - %s", defaults_file_name);
	exit(1);
}
else
{
	rewind(defaults_file);
//	defaults_content_ptr = fgets(defaults_content, 1024, defaults_file); // don't think I need this.
  fgets(defaults_content, 1024, defaults_file);
	if (verbose == 1) {
	    Proc_err(DEF_ERR_OPT,"defaults file name = %s", defaults_file_name);
      Proc_err(DEF_ERR_OPT,"defaults content is  = %s", defaults_content);
  } else {}
	fclose(defaults_file);
}
//OK, we have the defaults file content, now to parse it.
//The format should be  swp,o1p,f1p,f2p,rg,d1, lower bound percent (int), higher bound percent (int), tolerance , cost function, poise au to run and process
//10.0,5.0,8.1,1.1,32.0,2.0,20,20,0.2, minabsint, default
//Below taen from the janus_sx au program. The first line at least is always slightly magic to me.
field = strtok(defaults_content, ",");
strcpy (sw,field);
field = strtok(NULL, ",");
sscanf(field, "%s", &o1p);
field = strtok(NULL, ",");
sscanf(field, "%s", &f1p);
field = strtok(NULL, ",");
sscanf(field, "%s", &f2p);
field = strtok(NULL, ",");
sscanf(field, "%s", &rg);
field = strtok(NULL, ",");
sscanf(field, "%s", &d1s);
field = strtok(NULL, ",");
sscanf(field, "%s", &pc_lb);
field = strtok(NULL, ",");
sscanf(field, "%s", &pc_hb);
field = strtok(NULL, ",");
sscanf(field, "%s", &tol);
field = strtok(NULL, ",");
sscanf(field, "%s", &cost_function);
field = strtok(NULL, ",");
sscanf(field, "%s", &poise_au);



if (verbose == 1) {
//show text read in from file
    Proc_err(DEF_ERR_OPT, "sw is - %s \n o1p is - %s \n f1p - %s \n f2p - %s \n rg - %s\n d1 - %s \n pc_lb - %s \n pc_hb - %s \n tol - %s", sw,o1p,f1p,f2p,rg, d1s, pc_lb, pc_hb, tol);
    Proc_err(DEF_ERR_OPT, "cost function - %s \n Au program to run and process - %s ", cost_function, poise_au);
} else {}

//Ok, now have to convert those strings to float/doubles
sw_double = strtod(sw, &end_ptr);
o1_ppm_double = strtod(o1p, &end_ptr);
f1p_double = strtod(f1p, &end_ptr);
f2p_double = strtod(f2p, &end_ptr);
rg_float = strtof(rg, &end_ptr);
d1_float = strtof(d1s, &end_ptr);
tol_float = strtof(tol, &end_ptr);
pc_lb_int = atoi(pc_lb);
pc_hb_int = atoi(pc_hb);

if (verbose == 1) {
//show text to number conversion values
    Proc_err(DEF_ERR_OPT, "sw ppm - %f \n o1p ppm %f \n f1p ppm %f \n f2p ppm %f \n rg is %f \n d1 is %f\n tol is %f\n", sw_double, o1_ppm_double, f1p_double, f2p_double, rg_float, d1_float, tol_float);
    Proc_err(DEF_ERR_OPT, "percentage lower and higher than nominal 360 pulse to check - %i and %i", pc_lb_int, pc_hb_int);
} else {}

//Ok, now setup poise default 19F calib experiment

RPAR(param_set_name, "all")
STOREPAR("PULPROG", p_program)
GETPROSOL
STOREPAR("NS", 1)
STOREPAR("DS", 0)
STOREPAR("D 1", d1_float)
STOREPAR("SW", sw_double)
//STOREPAR("RG", rg_float) // This just does not work on my reproc mac... not sure about a spect.
STOREPAR("F1P", f1p_double)
STOREPAR("F2P", f2p_double)
STOREPARS("F1P", f1p_double)
STOREPARS("F2P", f2p_double)
STOREPAR("O1P", o1_ppm_double)
FETCHPARS("INSTRUM", instrum_name)
FETCHPARS("PROBHD", probe_name)
STOREPAR("RG", rg_float)
//get p1, then set the minimum and maximum p1. Note P1 is got from the prosol table.

FETCHPAR("P 1", &p1_init)
p1_init = p1_init*4; //this is a 360 pulse we are doing.
p1_min = p1_init - (p1_init * ((float)pc_lb_int/100) );
p1_max = p1_init + (p1_init * ((float)pc_hb_int/100) );

//create the method - check if we need to use a different au program for aqcqu and processing
if( strcmp(poise_au,"default") == 0)
{
//	sprintf(poise_cmd,"xpy poise --create NAME PARAM MIN MAX INIT TOL CF");
    sprintf(poise_cmd,"sendgui xpy poise --create %s %s %.2f %.2f %.2f %.2f %s %s",method_name, param, p1_min, p1_max, p1_init, tol_float, cost_function, default_au );
//deidnt work running only 7 arguments... needs 8... maybe if =default =zg
}
else {
    sprintf(poise_cmd,"sendgui xpy poise --create %s %s %.2f %.2f %.2f %.2f %s %s",method_name, param, p1_min, p1_max, p1_init, tol_float, cost_function, poise_au );
}

if (verbose == 1) {
    Proc_err(DEF_ERR_OPT, "poise command to create method - \n %s", poise_cmd);
} else {}

//issue command to make the method
 XCMD(poise_cmd)

//next use this created method to do the optimisation!
sprintf(poise_cmd, "sendgui xpy poise %s -q", method_name);
if (verbose == 1) {
    Proc_err(DEF_ERR_OPT, "poise command to run method - \n %s", poise_cmd);
} else {}

//set up trap for error if poise goes wrong.
STOREPAR("TI", "poise")  //poise puts the optimised value in TI if it completes

//Only do aquisition if not in test mode.
if (aqtest == 0)
{
    //ATMA exact
    //lets make some nicely phased peaks
    XCMD("sendgui AQ 10s");
    ZG
    EFP
    APK
    //now run optimiseation
    XCMD(poise_cmd)
}

//did poise run?
FETCHPAR("TI", poise_status)

if (aqtest == 0)//so we are in aquire mode, test if poise has run
{
    if ( strcmp ( poise_status, "poise") == 0 )
    {
    	  Proc_err(DEF_ERR_OPT, "Poise optimisation failed because value of TI is still %s", poise_status );
	      exit(1);
    }
} else {} //carry on, as we must be in test mode and dont care p1 hasn't been found)


//Now deal with result
FETCHPAR("P 1", &p1_opt)
p1_opt = p1_opt/4;
STOREPAR("P 1", p1_opt)
if (verbose == 1) {
    Proc_err(DEF_ERR_OPT, "Automated poise optimised value of p1: %.2f", p1_opt);
} else {}


//next, write the result to a file. Maybe to title also.
//Then compare p1_opt to p1_init (should be unchanged from prosol. Report if too different.

sprintf( title_path_name, "%s/title", PROCPATH(0) );
sprintf( title_text, " Original P1 = %.2f \n Poise calibrated P1 = %.2f", p1_init/4, p1_opt );
if (verbose == 1) {
	   Proc_err(DEF_ERR_OPT, "Writing %s into file %s", title_text, title_path_name);
}


if (( title_file = fopen( title_path_name, "w")) == 0)
{
		Proc_err(DEF_ERR_OPT, "Cannot open title file for writing:\n%s", title_path_name);
		exit(1);
} else
{
   fputs( title_text, title_file);
   fclose(title_file);
}


//Now to get parse probe_name to read into probe_name_trunc until space is found, we don't need all the guff
i=0;
while (i < strlen(probe_name) && probe_name[i] != ' ')
{
	  probe_name_trunc[i]=probe_name[i];
	  i++;
}

if (verbose ==1) {
    Proc_err(DEF_ERR_OPT,"instrum_name is - %s \n probe_name - %s \n probe_name_trunc - %s", instrum_name,probe_name,probe_name_trunc);
}
//now print to results file

sprintf( results_file_name, "%s/logfiles/%s-%s-%s", PathXWinNMRProg(), instrum_name,probe_name_trunc,method_name );
//what the time mr wolf?
time_t rawtime;

struct tm *info;
char time_buffer[80];
time(&rawtime);

info = localtime( &rawtime);
strftime(time_buffer , 80, "%x,%X", info);

sprintf( results_content, "%s,%.2f,%2f,%s\n",time_buffer,p1_opt,p1_init/4,name);
if (verbose == 1) {
	   Proc_err(DEF_ERR_OPT, "Writing %s into file %s", results_content, results_file_name);
}
//now write to results file in append mode.
if ((results_file = fopen(results_file_name, "a+")) == 0)
{
			Proc_err(DEF_ERR_OPT, "Cannot open file for writing:\n%s", results_file_name);
		  exit(1);
} else {
     fputs(results_content, results_file);
     fclose(results_file);
}


//Check how much p1_opt has changed from p1_init - report if too different
deviation=((fabs(p1_opt/(p1_init/4)))*100)-100;
if (verbose == 1) {
	   Proc_err(DEF_ERR_OPT, " P1 has deviated by %f percent. \n P1_init=%f \n p1_opt=%f", deviation,p1_init/4,p1_opt);
}

if (deviation >= max_deviation) {
  //do something 
}


QUIT
