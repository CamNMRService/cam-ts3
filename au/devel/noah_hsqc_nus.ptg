/****************************************************************/
/*      noah_hsqc - process NOAH 13C HSQC correlation experiments */
/*      18.04.2017                                              */
/****************************************************************/
/*      Short Description :                                     */
/*      AU program for processing NOAH 13C HSQC correlation     */
/*      experiments.                                            */
/****************************************************************/
/*      Keywords :                                              */
/*      NOAH, noah_hsqc, automation                             */
/****************************************************************/
/*      Description/Usage : noah_hsqc FnMODE (optional).        */
/*      Default FnMODE is Echo-Antiecho. Used in splitx_au.     */
/****************************************************************/
/*      Author(s) :                                             */
/*      Name            : Eriks Kupce                           */
/*      Organisation    : Bruker BioSpin                        */
/*      Email           : eriks.kupce@bruker.com                */
/****************************************************************/
/*      Name            Date    Modification:                   */
/*      eku             170418  created                         */
/*      eku             231118  updated for NUS                 */
/*      eku             040219  updated to allow mixed FnMODE   */
/****************************************************************/

char zgoptns[256];
FILE* fptr1;
char vclistname[PATH_MAX], vclistpath[PATH_MAX], line[PATH_MAX];
int listentry[4096];
int numpts, ret, fidsf1, maxfid, fntp;

if((i_argc > 2) && (strlen(i_argv[2]) > 1))   // processing options
{
  sprintf(cmd, "1 FnMODE %s", i_argv[2]); 
  XCMD (cmd)
  sprintf(cmd, "1s FnMODE %s", i_argv[2]); 
  XCMD (cmd)
}


FETCHPARS("ZGOPTNS", zgoptns);
if (strstr(zgoptns,"-DNUS"))
{

FETCHPARS("VDLIST", vclistname);
	if (getParfileDirForRead(vclistname, VC_DIRS, vclistpath) < 0)
    {
      Proc_err(DEF_ERR_OPT, "VC list called %s not found in %s - is this really an NUS NOAH dataset?",vclistname, vclistpath);
      ABORT
    }
dircp(vclistpath, ACQUPATH("nuslist"));
	
	if ( (fptr1 = fopen (ACQUPATH("nuslist"),"r")) == NULL )
    {
      Proc_err(DEF_ERR_OPT, "Could not open nuslist file in dataset. Processing aborted!");
      ABORT
    }

    /* Read first point index value, then scan for total no. of delay values. */

    if ( fgets (line,sizeof(line),fptr1) == NULL )
    {
      Proc_err(DEF_ERR_OPT, "No nuslist entry found - check original VCLIST\n %s", vclistname);
      (void) fclose (fptr1);
      ABORT
    }

    if ( (ret = sscanf (line,"%d",&listentry[0])) != 1 )
    {
      Proc_err(DEF_ERR_OPT, "--- nuslist has no valid entries ---");
      (void) fclose (fptr1);
      ABORT
    }

    numpts = 1;

    /* Check for more point index values and find the largest */
    maxfid=1;
    while ( fgets (line,sizeof(line),fptr1) != NULL )
    {
      if ( (ret = sscanf (line,"%d",&listentry[numpts])) != 1 )
        break;
      if (listentry[numpts] > maxfid)
     { maxfid=listentry[numpts];}
      numpts++;
      	
    }

    (void) fclose (fptr1);
	
	STOREPARS("FNTYPE", 2)
	STOREPAR("FNTYPE", 2)
	// TD needs to be at least 2x the largest complex point index in the nuslist
STOREPAR1("TD",(maxfid*2)+2)
STOREPAR1S("NusTD",(maxfid*2)+2)
}


XCMD ("2 WDW QSINE")
XCMD ("1 WDW QSINE")
XCMD ("1 SSB 2")
XCMD ("2 SSB 2")
XCMD ("2 PH_mod pk")
XCMD ("1 PH_mod pk")
XFB
// Check for NUS.
FETCHPARS("FnTYPE", &fntp)
if (fntp == 2) {
    XHT2
}
XCMD ("sendgui apk2d")
XCMD ("2 NLEV 20")
XCMD ("sendgui levcalc")
XCMD ("2 SPECTYP HSQC")
QUIT

