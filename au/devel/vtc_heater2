/********************************************** ^^A -*-C++-*- ***/
/*	vtc_heater2             03.03.2011                          */
/****************************************************************/
/*      Short Description : Use to turn BSVT on and off         */
/*      and to set temperature with appropriate chiller power   */
/****************************************************************/
/*	Keywords :					                                      	*/
/*      VTU, BSVT, heater, chiller                              */
/****************************************************************/
/*      Description/Usage :                                     */
/*  xau vtc_heater2 bsvt check : return 1 if BSVT is on, 0 if   */
/*                               off, -1 if error               */
/*  xau vtc_heater2 bsvt 0 : turn BSVT off                      */
/*  xau vtc_heater2 bsvt 1 : turn BSVT on                       */
/*  xau vtc_heater2 bscu check : return 0 if BSCU is off, 1 if  */
/*                               on weak, 2 if on high power    */
/*  xau vtc_heater2 <temperature> : set desired temperature and */
/*                                chiller power, if appropriate */
/****************************************************************/
/*      Author(s) :                                             */
/*      Name            : Gabriella Schmidt                     */
/*	Organisation	: Bruker BioSpin GmbH			                    */
/*      Email           : gabriella.schmidt@bruker-biospin.de   */
/****************************************************************/
/*      Name            Date      Modification:                 */
/*      rss             20091110  created                       */
/*      ptg					20201210 modified to not changechiller state*/
/*										except for low T													*/
/*			ptg						2021-01-26 Added setting of selftune			*/ 
/*										parameters NB this seems to need ch 0  ?? */
/****************************************************************/
/*
$Id: vtc_example,v 1.1.2.1 2009/12/11 15:10:36 gsc Exp $
*/

/* see vtc_example for array with all known VTC parameter */

const char *onoff;
const char *newstate;
const char *probe_ch;
const char *value;
const char *chill_strength;
const char *chill_type;
static char teTarget[64] = "VTC_TARG_TEMP_CH";
char prompt[256];
float flow_target, temptarget;
float flow_measured;
char newval[16], newval2[16], acttemp[16], value2[16];
char device[4];
char stopmessage[512];
char probeId[100];
char selftunefile[100];
char  cur_probeInfo[4][PATH_MAX];
const char* ccp;

#define LOWTEMPWEAKCHILL 290
#define LOWTEMPMEDCHILL 273

int returnvalue, heaterstatus, chillstatus, chilltype ;
int returnstatus = 0 ;

// get ID of installed probe for self tune setting 
// Use TS3 compatible syntax using CALL_PROBESERVER!!




	CALL_PROBESERVER("probe_client getParams getInstalledProbe", ccp);
	
	i1 = 0;
	do
	{
	    size_t field_len = strcspn(ccp, ",");
	    snprintf(cur_probeInfo[i1], sizeof(cur_probeInfo[i1]), "%.*s",
		     (int)field_len, ccp);
	    i1++;
	    ccp += field_len;
	}
	while (*ccp++ && i1 < 4);

	if (i1 < 4)
	    strcpy(probeId, "unknown");
	else
	    strcpy(probeId,  cur_probeInfo[0]);
		     
		     Proc_err(ERROR_OPT, "probe is %s", probeId);
		     


/* checking what probe channel to use for setting temperature */
VTU_GET_PARAM("VTC_PROBE_CH",probe_ch);
if (!AUERR)
{
	/* append found channel to VTC_TARG_TEMP_CH */
	strcat(teTarget,probe_ch);
}
else
{
	STOPMSG("Cannot find probe channel.")
}
 
/* checking what chiller, if any, is installed */
VTU_GET_PARAM("VTC_CHILL_TYPE", chill_type)
if(!AUERR)
{
	chilltype = atoi(chill_type);  // 0 for no chiller, 1 for BCU-I, 2 for BCU-II
}

if ( i_argc > 2 )  //user provided argumet, so check if first argument is temperature
{
	temptarget = atof(i_argv[2]);  //read first argument and convert to float
	if ( temptarget == 0.0 )  //if argument is not a number atof returns 0.0, if this is the case check the arg is BSVT or BSCU (only devices we can control here)
	{
		strcpy ( device, i_argv[2] );
		if ( strcasecmp ( device, "BSCU" ) && strcasecmp ( device, "Bsvt" ) )
		{
			STOPMSG("Could not understand what device to control.\n"
			"Can only control BSVT and BSCU.")
		}
	} 
}
else //user provided no argument so ask questions
{
	returnstatus = 1 ;
	strcpy(device, "BSCU");
	GETSTRING("Type BSVT to turn it off or on, type BSCU to check whether it is on "
		"or type the temperature in K you want to set", device)
	temptarget = atof(device);
	if ( temptarget == 0.0 )
	{
		if ( strcasecmp ( device, "BSCU" ) && strcasecmp ( device, "Bsvt" ) )
		{
 			strcpy(device, "BSVT");
			GETSTRING("Type BSVT to turn it off or on, type BSCU to check whether it is on "
				"or type the temperature in K you want to set", device)
			temptarget = atof(device);
			if ( temptarget == 0.0 )
			{
	 			if ( strcasecmp ( device, "BSCU" ) && strcasecmp ( device, "Bsvt" ) )
 				{
 				STOPMSG("Could not understand what device to control.\n"
 					"Can only control BSVT and BSCU.")
 				}
			}
		}
 	}
}

if ( temptarget == 0.0 )  //something other than temp setting requested
{
	if ( !strcasecmp ( device, "BSVT" ) )
	{
		/* dealing with BSVT here */
		if ( i_argc > 3 )
		{
			if ( !strcasecmp ( "check", i_argv[3] ) )  //if second arg is "check" then reoort status
			{
				VTU_GET_PARAM("VTC_CMD_STAT",onoff);
				heaterstatus = atoi(onoff);
				returnvalue = heaterstatus ;
			}
			else  //if second arg is not check then we are turning the bsvt on or off
			{
				strcpy ( newval, i_argv[3] ) ;
				VTU_PUSH_PARAM("VTC_CMD_STAT",newval)  //set bsvt state
				sleep(5);
				VTU_GET_PARAM("VTC_CMD_STAT",newstate) //read bsvt state
				if ( strcmp ( newval, newstate ))				//check for consistency and returnsuccess or failure
				{
					returnvalue = -1 ;   // failed
				}
				else
				{
					returnvalue = 0 ;    // successfully changed state of BSVT
				}
			}
		}
		else //only BSVT argument given, so ask what to do next
		{
			VTU_GET_PARAM("VTC_CMD_STAT",onoff);
			sprintf(prompt, "Current VTU state is %s.  Enter desired state:\n"
				"0: off\n"
				"1: on\n", onoff); 
			GETSTRING(prompt,onoff)
			VTU_PUSH_PARAM("VTC_CMD_STAT",onoff)
			sleep(5);
			VTU_GET_PARAM("VTC_CMD_STAT",newstate)
			if ( strcmp ( newstate, onoff ))
			{
				sprintf(stopmessage, "Unable to turn VT unit on or off.");
 				STOPMSG(stopmessage)
			}
		}
	}
	else
	{
		/* dealing with BSCU here */
		if ( i_argc > 3 )
		{
			if ( !strcasecmp ( "check", i_argv[3] ) )  //user asked to check BSCU status
			{
				VTU_GET_PARAM("VTC_CHILL_ACT_STRENGTH",chill_strength);
				chillstatus = atoi(chill_strength) ;
				returnvalue = chillstatus ;
			}
		}
		else //ask user what to do with BSCU
		{
			VTU_GET_PARAM("VTC_CHILL_ACT_STRENGTH",chill_strength);
			chillstatus = atoi(chill_strength) ;
			if(!AUERR)
			{
				sprintf(prompt, "Your current chiller type is %s (where 0 = no chiller, 1 = BSCU, and ???).\n"
					"  The current chiller strength is %s (for a BSCU, 0 = off, 1 = weak, 2 = standard \n;"
					" for a BCU, 0 = off, 1 = weak ).  Enter the desired chiller strength: ", chill_type,
					chill_strength);
				GETSTRING(prompt, chill_strength)
				VTU_PUSH_PARAM("VTC_CHILL_ACT_STRENGTH",chill_strength)
				sleep(5);
				VTU_GET_PARAM("VTC_CMD_STAT",newstate)
				if ( strcmp ( newstate, chill_strength ))
				{
					sprintf(stopmessage, "Unable to change chiller unit heater power.");
 					STOPMSG(stopmessage)
				}
			}
		}
	}
}
else
{
	
	
//first set appropriate selftune parmaeters
// NB seems to need to use channel 0 rather than whatever the active probe channel is...
//Tunefile names should be probeId with suffix for temperature range
// FOr first pass tunefiles for max chiller setting ie < LOWTEMPWEAKCHILL (_LT), up to RT+30 (_RT), and
// higher temps (_HT) 
// No success checking - if the files don't exist you just end up with the current params

strcpy(selftunefile, probeId);


if (LOWTEMPWEAKCHILL  > temptarget )
{
strcat(selftunefile, "_LT");
}
else if (temptarget > 328.0)
{
strcat(selftunefile, "_HT");
}
else
{
strcat(selftunefile, "_RT");
}


	
VTU_SET_SELFTUNE_SETTINGS(selftunefile, 0)			
	
	
	
	/* setting temperature here to temptarget */
/* DO NOT USE VTU_PUSH_PARAM AS THIS SETS THE SENSOR TEMP NOT CORRECTED TEMP !!!*/
  //  sprintf(newval, "%f", temptarget);

		/* set temperature */
//	VTU_PUSH_PARAM(teTarget,newval);
STOREPAR("TE", temptarget);

TESET

		/* working out what chiller power setting to use */
	/* at the moment, this is done only for BCUI/II */
	/* NB changin the chiller setting causes a long equilibration time, especially for BCU-II */
	/* and very especially if turning BCU-II on from warm state, so should be avoided if possible */
		if ( chilltype == 1 )
	{
		if ( temptarget > LOWTEMPWEAKCHILL )  //target can be reached with medium chiller setting of BCU-I
		{
			strcpy ( newval2, "1" ) ;
		}
		else //target is too low for medium chiller setting so we are forced to change
		{
			strcpy ( newval2, "2" ) ;
		}
		VTU_PUSH_PARAM("VTC_CHILL_TARG_STRENGTH",newval2);  // set desired chiller state
	}
	else if ( chilltype == 2 )
	{
	  if ( temptarget > LOWTEMPWEAKCHILL )
		{
			strcpy ( newval2, "1" ) ;
		}
		else if ( temptarget > LOWTEMPMEDCHILL )
		{
			strcpy ( newval2, "2" ) ;
		}
		else 
		{
			strcpy ( newval2, "3" ) ;
		}
		VTU_PUSH_PARAM("VTC_CHILL_TARG_STRENGTH",newval2);
	}

		/* set chiller power */
	sleep(5);  // so it has time to change parameters
	VTU_GET_PARAM(teTarget,value);
	/* protect the contents of value */
	strcpy(value2, value);
//		Proc_err(DEF_ERR_OPT, "newval: %s, value: %s, strcmp ( newval, value ): %d, value2: %s ", newval, value, strcmp(newval, value), value2);
	VTU_GET_PARAM("VTC_CHILL_ACT_STRENGTH",chill_strength);
	if ( ( newval[0] != value2[0] ) || ( newval[1] != value2[1] ) || ( newval[2] != value2[2] ) )
	{
		if ( returnstatus != 0 )
		{
			sprintf(stopmessage, "newval: %s. value2: %s. Could not set desired temperature to %f.", newval, value2, temptarget);
			STOPMSG(stopmessage)
		}
		else
		{
			returnvalue = -1 ;
		}
	}
	if ( strcmp (newval2, chill_strength)) 
	{
		if ( returnstatus != 0 )
		{
			sprintf(stopmessage, "Could not change chiller output strength.  Desired strength is %s\n"
			"and actual strength is %s.  Is chiller in remote mode?", newval, chill_strength);
			STOPMSG(stopmessage)
		}
		else
		{
			returnvalue = -1 ;
		}
	}
	else
	{
		if ( returnstatus != 0 )
		{
			Proc_err(DEF_ERR_OPT, "Chiller output strength has successfully been changed to %s\n"
			" and the temperature has been set to %s", chill_strength, value2);
		}
		else
		{
			returnvalue = temptarget ;
		}
	}
}

AUERR = returnvalue ;
QUIT

