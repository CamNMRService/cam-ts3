
//sketching out a parameter set definer/copyier

#define MAX_LINE_LENGTH 256
GETCURDATA
SETCURDATA
AUERR = local_au(curdat);
QUIT

int local_au(const char* curdat)
{
char suffix[7] = ".ref";

int ts_major = GetTsVersionMajor();
int ts_minor = GetTsVersionMinor();
int ts_patch = GetTsVersionPl();
int inside_parset = 0;  // Flag to indicate we're inside a parset section

char instrum_name[MAX_LINE_LENGTH]="spect";
char inst_user_par_loc[PATH_MAX]="";
char git_par_loc[PATH_MAX]="";
char parset[MAX_LINE_LENGTH]="";
char line[MAX_LINE_LENGTH];
char spect_par_set_file_loc[PATH_MAX]="";
char err_str[MAX_LINE_LENGTH]="no error";
char temp_str[MAX_LINE_LENGTH]="";
char cmd_str_a[MAX_LINE_LENGTH]=""; //command to read the parset
char cmd_str_b[MAX_LINE_LENGTH]=""; //command to issue to change a parameter etc
char cmd_str_c[MAX_LINE_LENGTH]=""; //command to write the parameter set

FILE *par_set_file;
GETCURDATA
SETCURDATA
FETCHPARS("INSTRUM", instrum_name)


#ifdef HAS_WINDOWS_FEATURES
   sprintf(inst_user_par_loc,"C:\\Bruker\\topspin%i.%i.%i\\exp\\stan\\nmr\\par\\user\\",ts_major,ts_minor,ts_patch);
   sprintf(git_par_loc,"C:\\Bruker\\cam_ts%i\\au\\service\\par\\",ts_major);
   sprintf(spect_par_set_file_loc,"C:\\Bruker\\cam-ts%i\\par\\reference\\%s-pardef",ts_major,instrum_name);
#else //Not actually checked this on linux... We have no linux xpectrometers
 		
#endif

// Open the file
par_set_file = fopen(spect_par_set_file_loc, "r");
if (par_set_file == NULL) {
  sprintf(err_str,"Could not open spect_par_set_file_loc - %s", spect_par_set_file_loc);
  Proc_err(DEF_ERR_OPT,"%s", err_str);
  STOPMSG(err_str)
}

// Loop through the file line by line
while (fgets(line, sizeof(line), par_set_file)) 
{
   // Check if the line starts with "##"
   if (strncmp(line, "##", 2) == 0) 
   {
      // If we find a line starting with "##", it's the start of a new parset
      inside_parset = 1;
      // Remove the "##" and any leading/trailing spaces, store in parset
      strncpy(parset, line + 2, MAX_LINE_LENGTH - 1);
      // Remove newline character at the end
      parset[strcspn(parset, "\n")] = '\0';
      //printf("Parset found: %s\n", parset);
      sprintf(cmd_str_a,"rpar %s all",parset);
      sprintf(err_str,"going to run cmd - %s", cmd_str_a);
      Proc_err(DEF_ERR_OPT,"%s", err_str);
      XCMD(cmd_str_a)
      parset[strlen(parset) -1 - strlen(suffix)] = '\0'; //now remove trailing suffix
   } else if (inside_parset) 
   {
      if (strncmp(line, "!!", 2) == 0) //lines beginning with !! are comments
      {
         // Read subsequent lines into cmd until another "##" is found
         strncpy(temp_str, line, MAX_LINE_LENGTH - 1);
         if (strlen(temp_str)>1)//so not an empty line
         {
            temp_str[strcspn(temp_str, "\n")] = '\0'; // Remove newline character at the end
            sprintf(cmd_str_b,"%s",temp_str); //not sure whats best. Maybe have sendgui in pardef file
            //sprintf(cmd_str_b,"sendgui %s",temp_str);
            sprintf(err_str,"going to run cmd - %s", cmd_str_b);
            Proc_err(DEF_ERR_OPT,"%s", err_str);
            XCMD(cmd_str_b)

            sprintf(cmd_str_c,"wpar %s-%s all",parset,instrum_name);
            sprintf(err_str,"going to run cmd - %s", cmd_str_c);
            Proc_err(DEF_ERR_OPT,"%s", err_str);
            XCMD(cmd_str_c)
         }
      }

   }
}//end of while loop

    
// Close the file
fclose(par_set_file);

return 0;//end of main procedure
}

