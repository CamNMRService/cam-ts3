/***********************************************-*-C++-*-********/
/*	proc_tecalib3		12.01.2001			*/
/****************************************************************/
/*	Short Description :					*/
/*	AU program for evaluation of previous temperature	*/	
/*	calibration experiments.				*/
/****************************************************************/
/*	Keywords :						*/
/*	TE EDTE MeOh Ethylene Glycol temperature calibration	*/
/****************************************************************/
/*	Description/Usage :					*/
/*	The purpose is to evaluate a set of NMR experiments	*/
/*	that has been performed using the AU program		*/
/*	tecalib in order to measure sample temperature over	*/
/*	a certain temperature range.				*/
/*	The result is presented in an ASCII file called		*/
/*	VT_calib.txt in the pdata/1 directory of the first of	*/
/*	the consecutive experiments.				*/
/*	In summary, the program works as follows :		*/
/*								*/
/*	1. The program is called on the first dataset of a	*/
/*	   series of datasets that were acquired, for instance,	*/
/*	   with the AU program tecalib.				*/
/*	2. Each experiment is read and evaluated.		*/
/*	3. After all experiments have been read, the		*/
/*	   calibration parameters are calculated.		*/
/*								*/
/*	The program is called with:				*/
/*	xau proc_tecalib sample no				*/
/*		where sample is 0 for Ethylene-Glycol in DMSO	*/
/*				1 for Ethylene-Glycol pure	*/
/*				2 for MeOH in MeOH-d4		*/
/*				5 for MeOH pure			*/
/*				6 for MeOD pure			*/             
/*		and no means no further questions are asked and	*/
/*		default values are used.			*/
/*								*/
/*	You can use MeOH pure, 4% MeOH in MeOH_d4, Ethylene-	*/
/*	glycol pure, or our Ethylene-glycol in DMSO sample,	*/
/*	For high field and cryo-probe systems a sample of MeOD	*/
/*	is recommended as this will avoid problems with peak-   */
/*	shifts arising from radiation damping.			*/
/*								*/
/*	Currently, the program can work with up to 128		*/
/*	different temperature values. If you need more, you	*/
/*	have to increase the value of MAX_TEMP_VAL.		*/
/*								*/
/****************************************************************/
/*	Author(s) :						*/
/*	Name            : Jochem Struppe			*/
/*	Organisation    : Bruker Instruments Inc.		*/
/*	Email		: Jochem.Struppe@nmr.bruker.com		*/
/****************************************************************/
/*	Name		Date	Modification:			*/
/*	jos		000601	created				*/
/*	jos		010112	revised				*/
/*	agi/ptg		070222  add MeOD, update output		*/
/*				use stored TE values		*/
// ptg 			20221006  calls teutil3 wihch includes updated 99.8% MeOD curve from 
//Extension and improvement of the methanol-d4 NMR thermometer calibration
//https://doi.org/10.1002/mrc.5216
// requires teutil3
// ptg 		20221006 Using updated maxi=2500 becasue somehow CY=1000, MAXI=1500 fails to pick the CD3 peak??
// ptg 		20221006 added contents of include file into this AU program...
/****************************************************************/
/*
$Id: $
*/ 

GETCURDATA
return(proc_tecalib(curdat,cmd));
}

#define MAX_TEMP_VAL 129

#include <inc/exptUtil>
/* utilities for printing and calculation of experiment time */


/*--------------------------------------------------------*/
/*- Functions for temperature stability and calibration --*/
/*--------------------------------------------------------*/

#define GLYCOL 0
#define GLYCOLP 1
#define METHANOL 2
#define METHANOLP 5
#define METHANOLD 6
#define METHANOLDNEW 7

/*--------------------------------------------------------*/
/*--------------- Asks for sample type -------------------*/
/*--------------------------------------------------------*/

int SampleType(float te)
{
  char Glycol_Methanol, EG_Pur;
  char Response[10];
  char Question[128];
  int sample;


    strcpy(Response, "M");                     /* set default methanol */
    if (te > 310.0)  strcpy(Response, "G");    /* set default glycol   */

    GETSTRING("(G)lycol or (M)ethanol :",Response)
	if (isupper(Response[0]))
          Glycol_Methanol = Response[0];
        else
          Glycol_Methanol = _toupper(Response[0]);

    switch (Glycol_Methanol)
    {
      case 'G' : sprintf(Question,"Glycol (P)ure [100%%] or (B)ruker [80%% in dmso] : ");
		 break;
      case 'M' : sprintf(Question,"Methanol (P)ure [100%%], (B)ruker [4%%], (D)euterated [<0.1%%], (N)ew calibration Deuterated[<0.1%%] : ");
		 break;
      default  : STOPMSG(" Program failed : Invalid answer ");
		 break;
    }

    sprintf(Response,"B");
    GETSTRING(Question,Response);
    if (isupper(Response[0]))
      EG_Pur = Response[0];
    else
      EG_Pur = _toupper(Response[0]);
    switch (EG_Pur)
    {
      case 'P' : break;
      case 'B' : break;
      case 'D' : if (Glycol_Methanol == 'M') break;
	  case 'N' : if (Glycol_Methanol == 'M') break;
      default  : STOPMSG(" Program failed : Invalid answer ");
    }
    sprintf(Response,"YES");

    switch (Glycol_Methanol)
    {
      case 'G' : if (EG_Pur == 'P') 
                 {
                   sample = GLYCOLP;
                 }
                 else
                 {
                   sample = GLYCOL;
                 }
                 break;

      case 'M' : if (EG_Pur == 'P') 
                 {
                   sample = METHANOLP;
                 }
                 else if (EG_Pur == 'B')
                 {
                   sample = METHANOL;
                 }
                 else if (EG_Pur == 'D')
                 {
                   sample = METHANOLD;
                 }
				 else if (EG_Pur == 'N')
                 {
                   sample = METHANOLDNEW;
                 }
                 break;
  
    }

return sample;
}

/*--------------------------------------------------------*/
/*-------------- Calculate temperature -------------------*/ 
/*--------------------------------------------------------*/

double CalcTemp (double delta,int sample)
{
  int i;
  double tecalc;
  double coefa, coefb;
  static double TPDef[8][4] = {{300.0,380.0,-108.33,460.41},
			       {300.0,380.0, -99.00,463.00},
			       {1.7600,1.4222,-114.83,471.85},
			       {2.0800,1.7600,-125.00,490.00},
			       {2.4300,2.0800,-140.00,521.33},
			       {1.8240,1.4200,-108.60,468.10},
			       {2.1474,1.8240,-124.98,498.40},
			       {2.5028,2.1474,-142.80,537.40}};

  if (delta < 0.0) delta = -1.0 * delta;

  switch (sample)
  {
    case GLYCOL :  tecalc= TPDef[GLYCOL][2]* delta + TPDef[GLYCOL][3];
                   break;

    case GLYCOLP : tecalc= TPDef[GLYCOLP][2]* delta + TPDef[GLYCOLP][3];
                   break;

    case METHANOL: for (i=0; i < 3; i++)
                   {
                      if ((delta >= TPDef[METHANOL+i][1]) && (delta <= TPDef[METHANOL+i][0])) 
                      {
                        coefa = TPDef[METHANOL+i][2];
                        coefb = TPDef[METHANOL+i][3];
                      }
                   } 
                   tecalc= coefa * delta + coefb;
                   break;

    case METHANOLP : for (i=0; i < 3; i++)
                     {
                       if ((delta >= TPDef[METHANOLP+i][1]) && (delta <= TPDef[METHANOLP+i][0])) 
                       {
                         coefa = TPDef[METHANOLP+i][2];
                         coefb = TPDef[METHANOLP+i][3];
                       }
                     } 
                     tecalc= coefa * delta + coefb;
                     break;

    case METHANOLD : tecalc= (-16.7467 * delta - 52.5130) * delta + 419.1381;
                     break;
	case METHANOLDNEW : tecalc= (416.4745 + (delta*-39.5133) + (delta*delta*-36.062) + (delta*delta*delta*11.4869) + (delta*delta*delta*delta*-2.4340));
						break;
  }
  return (tecalc);
}

/*--------------------------------------------------------*/
/*-------------- Calculate sums --------------------------*/
/*--------------------------------------------------------*/
double  Summation(double te[], int size)
{
  int i=0;
  double sum=0.0;
  for(i=0;i<size;i++)
  {
    sum=sum+te[i];
  }
  return sum;
}

/*--------------------------------------------------------*/
/*-------------- Calculate sums and products -------------*/ 
/*--------------------------------------------------------*/

double  Sumprod(double te[], double delta[],int size)
{
  int i=0;
  double sum=0.0;
  for(i=0;i<size;i++)
  {
    sum=sum+te[i]*delta[i];
  }
  return sum;
}

int proc_tecalib(char *curdat, char* cmd)
{
/*-------------Variables --------------------------------*/
int 	i1, i2, num, te_mode;
int 	startExpno, numtemp;

float 	hightemp, lowtemp;
float	leftend, reference, leftlimit, rightlimit;

double	offset, sweepwidth, larmorfreq;
double 	delta_ppm[MAX_TEMP_VAL], delta_calc[MAX_TEMP_VAL], acttemp[MAX_TEMP_VAL];
double 	temperature[MAX_TEMP_VAL];
double  intensity, coefa, coefb;
double 	ppma[2];
double 	edte_offset, edte_slope, real_offset, real_slope;
double	edte_C_offset, real_C_offset;
double  r;
double  Sxx, Sxy, Sx, Sy, Syy; 
int n;
float phc0, phc1;
float exptemp;
int usevtlist=1;

char	text[PATH_MAX], filsource[PATH_MAX], curprin[PATH_MAX];
char 	vtlistname[PATH_MAX], vtlistpath[PATH_MAX];
char 	line[255], docheck[4], printer[PATH_MAX];
char 	tmpfile[PATH_MAX], resultfile[PATH_MAX];

float MI_SAVE, MAXI_SAVE, f1p_save, f2p_save, CY_SAVE;
int PSCAL_SAVE; 
float ppm1, ppm2, intens1, intens2, ppm, intens;

FILE *fptr1, *textfilepointer1, *textfilepointer2;

/*-------------------------------------------------------*/
/*------------ Get some relevant parameters -------------*/
/*-------------------------------------------------------*/

te_mode = -1;
(void) strcpy (docheck,"yes");
sscanf(cmd,"%d %s", &te_mode, docheck);

/*-------------------------------------------------------*/
/*----- Prepare Experiment and get the right sample -----*/
/*-------------------------------------------------------*/

startExpno = expno;
FETCHPARS("VTLIST",vtlistname);
(void)sprintf(vtlistpath,"%s/lists/vt/%s",getstan(0,0),vtlistname);
if ( (fptr1 = fopen (vtlistpath,"r")) == NULL )
{
	usevtlist=0;  
}

/*-------------------------------------------------------*/
/*--- Read first temperature value, scan for highest ----*/
/*--- and lowest temperature and the total number of ----*/
/*--- temperature values. -------------------------------*/
/*-------------------------------------------------------*/

if ( !usevtlist || fgets (line,PATH_MAX-1,fptr1) == NULL )
{
  usevtlist=0;
	numtemp = 10;
	GETINT("No valid vtlist found!  Please enter number of experiments to process:", numtemp); 
	for (i1=0; i1<numtemp; i1++) acttemp[i1] = -1.0;
}
else
{
	sscanf (line,"%lf",&acttemp[0]);
	hightemp = lowtemp = acttemp[0];
	numtemp = 1;

	while ( fgets (line,PATH_MAX-1,fptr1) != NULL )
	{
  	sscanf (line,"%lf",&acttemp[numtemp]);
  	if ( acttemp[numtemp] > hightemp ) 	hightemp = acttemp[numtemp];
  	if ( acttemp[numtemp] < lowtemp )  	lowtemp = acttemp[numtemp];
  	numtemp++; 

		if ( numtemp > MAX_TEMP_VAL-1 )
		{
  		Proc_err (DEF_ERR_OPT,"Maximum number of temperature\n"
			"values exceeded %d (max: %d). Please\n"
			"reduce the number of values\n"
			"with 'edlist vt %s'.",numtemp, MAX_TEMP_VAL,vtlistname);
  	ABORT
		}
	}	
	(void) fclose (fptr1);
}


/* get sample type, from command options or ask */
if (te_mode == -1)
  te_mode = SampleType(hightemp);

/*-------------------------------------------------------*/
/*--------- Get number of experiments -------------------*/
/*-------------------------------------------------------*/

if ( !strcmp (docheck,"yes") )
{
  do
  {
    i1 = numtemp;
    if (Proc_err(QUESTION_OPT,
	"You chose to evaluate %d experiments?",i1) != ERR_OK)
    {
      GETINT("Enter number of experiments : ",i1);
    }
  } while ( (i1 > numtemp) || (i1 == 0) );
  numtemp = i1;
}

/*-------------------------------------------------------*/
/*------ Prepare resultfile -----------------------------*/
/*-------------------------------------------------------*/

strcpy(resultfile,PROCPATH("VT_calib.txt"));
//(void)sprintf(resultfile,"%s/data/%s/nmr/%s/%d/pdata/%d/VT_calib.txt",
 //                        disk, user, name, startExpno, procno);
textfilepointer2 = fopen(resultfile,"wt");
fprintf(textfilepointer2,"Dataset: %s\n\n"
"   expt_No.   line_1    line_2    shift_diff    T_expt       T_set\n"
"------------------------------------------------------------------\n",
resultfile);
fclose(textfilepointer2);

/*-------------------------------------------------------*/
/*----- Process the experiments -------------------------*/
/*-------------------------------------------------------*/

TIMES(numtemp)
  (void)sprintf(text,"evaluating experiment # %d (TE = %f)",
                          loopcount1+1,acttemp[loopcount1]);
  Show_status(text);

  FETCHPARS("O1",&offset);
  FETCHPARS("SR",&reference);
  FETCHPARS("SW",&sweepwidth);
  FETCHPARS("BF1",&larmorfreq);
  FETCHPARS("TE",&acttemp[loopcount1]);
  FETCHPAR("ABSF1",&leftlimit);
  FETCHPAR("ABSF2",&rightlimit);
  FETCHPAR("CURPRIN",curprin);
	FETCHPAR("MI",&MI_SAVE);
  STOREPAR("MI",2.5);
	FETCHPAR("MAXI",&MAXI_SAVE) ;
  STOREPAR("MAXI",2500.0);
	FETCHPAR("PSCAL",&PSCAL_SAVE);
  STOREPAR("PSCAL",0);
	FETCHPAR("CY",&CY_SAVE);
  STOREPAR("CY",1000.0);
  FETCHPAR("F1P",&f1p_save);
	FETCHPAR("F2P",&f2p_save);
	STOREPAR("F1P", 5.5);
	STOREPAR("F2P", 3.0);

  /* get actually used temperature, flag if different to vtlist */ 
  FETCHPARS("TE", &exptemp);

	if (usevtlist && fabs(exptemp - acttemp[loopcount1]) > 0.1) 
    Proc_err(INFO_OPT, "vtlist entry (%d = %.1lf K) is different from experiment temperature (%.1f)!", loopcount1+1, acttemp[loopcount1], exptemp);
  
  /* always use the real temperature in the calculation */
  acttemp[loopcount1] = exptemp;


/*-------------------------------------------------------*/
/*------- Begin with data collection --------------------*/
/*-------------------------------------------------------*/

/*-------------------------------------------------------*/
/*--------------- Switch to fid, process with -----------*/
/*--------------- efp, apk and abs; peakpick ------------*/
/*-------------------------------------------------------*/


 
/* autophase all spectra!! */

  EF
	APKS
  ABSF;
  PP;
XCMD("sendgui convertpeaklist txt");

strcpy(filsource,PROCPATH("peak.txt"));
 // (void)sprintf(filsource,"%s/data/%s/nmr/%s/%d/pdata/%d/peak.txt",
	//		disk, user, name, expno, procno);
  textfilepointer1 = fopen(filsource,"r");

/*-------------------------------------------------------*/
/*---------- Now is the data collection at work ---------*/
/*-------------------------------------------------------*/
	
  textfilepointer2 = fopen(resultfile,"at");

  /* Read comment lines and discard them */

  for(i2=1;i2<5;i2++)
  {
    fgets (line,sizeof(line),textfilepointer1);
  }


/* pick biggest two peaks */

intens1=-1;
intens2=-1;
while(fscanf(textfilepointer1,"%*d %*f %*f %f %f",&ppm,&intens)==2)
{
	if (intens>intens1)
	{
		intens2=intens1;
		intens1=intens;
		ppm2=ppm1;
		ppm1=ppm;
	}
	else if (intens>intens2)
	{
		intens2=intens;
		ppm2=ppm;
	}
}

  delta_ppm[loopcount1] = ppm1 - ppm2;
  temperature[loopcount1] = CalcTemp(delta_ppm[loopcount1],	te_mode); 
  fprintf(textfilepointer2,
	"%8d      %-6.4f    %-6.4f      %-6.4f    %8.2f    %8.1f\n",
		loopcount1+1,ppm1,ppm2,ppm1-ppm2,
		temperature[loopcount1],acttemp[loopcount1]);

  fclose(textfilepointer1);
  fclose(textfilepointer2);

/*--------------------------------------------------------*/
/*----------------- loop done ----------------------------*/
/*--------------------------------------------------------*/

  STOREPAR( "CURPRIN", curprin );
  IEXPNO;
END
DEXPNO;

/*--------------------------------------------------------*/
/*----------- Calculate new offset and gradient ----------*/
/*--------------------------------------------------------*/
/* note: X=true temperature, Y=set temperature */
n = numtemp;
Sxx = Sumprod(temperature, temperature, n);
Syy = Sumprod(acttemp, acttemp, n);
Sxy = Sumprod(temperature, acttemp, n); 
Sx = Summation(temperature,n);
Sy = Summation(acttemp,n);
 
edte_slope = (n * Syy - Sy * Sy)/(n * Sxy - Sy * Sx);
real_slope = 1.0/edte_slope;
edte_offset = ( Sy - edte_slope * Sx)/n;
real_offset = ( Sx - real_slope * Sy)/n;
r = ( n * Sxy - Sx * Sy) / sqrt((n * Sxx - Sx*Sx) * (n * Syy - Sy*Sy));

edte_C_offset=273.15*(edte_slope-1.0) + edte_offset;
real_C_offset=273.15*(real_slope-1.0) + real_offset;


textfilepointer2 = fopen(resultfile,"at");
fprintf(textfilepointer2, "\n\n");
fprintf(textfilepointer2, "EDTE correction parameters:\n");
fprintf(textfilepointer2, "    slope: %.5lf  offset: %.3lf K\n", edte_slope, edte_offset);
fprintf(textfilepointer2, "or  slope: %.5lf  offset: %.3lf C (for VT unit in centigrade)\n", edte_slope, edte_C_offset);
fprintf(textfilepointer2, "     (i.e.  T_set = T_true * slope + offset)\n\n");
fprintf(textfilepointer2, "Manual correction function:\n");
fprintf(textfilepointer2, "    slope: %.5lf  offset: %.3lf K\n", real_slope, real_offset);
fprintf(textfilepointer2, "or  slope: %.5lf  offset: %.3lf C (for VT unit in centigrade\n", real_slope, real_C_offset);
fprintf(textfilepointer2, "     (i.e.  T_true = T_set * slope + offset)\n\n");
fprintf(textfilepointer2, "Correlation coefficient of fit (r) : %.6lf  (<0.999 is probably suspect!)", r);

fclose(textfilepointer2);

showfile(resultfile);
QUIT